from aiogram import F, Router, types
from parser_fp import Parser
from datetime import datetime, timedelta
import re
from loguru import logger
import json
from enums.enums import Data
import asyncio
import aiofiles

logger.add("tgbot.log", format="{time} | {level} | {message}", level="INFO")

router = Router()
user_data_cache = {}
user_data_cache_lock = asyncio.Lock()
CACHE_DURATION = timedelta(minutes=10)

async def load_db():
    try:
        async with aiofiles.open('database/users.json', 'r', encoding='utf-8') as f:
            content = await f.read()
        return json.loads(content)
    except FileNotFoundError:
        return []

@router.message(F.text.startswith("/start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è FunPay.")

async def get_cached_user_data(user_id, parse_usr_data_func):
    async with user_data_cache_lock:
        if user_id in user_data_cache:
            cached_entry = user_data_cache[user_id]
            timestamp, data = cached_entry["timestamp"], cached_entry["data"]

            if datetime.now() - timestamp < CACHE_DURATION:
                return data

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        user_data = await parse_usr_data_func(user_id)
        user_data_cache[user_id] = {
            "timestamp": datetime.now(),
            "data": user_data
        }

        return user_data

@router.inline_query()
async def inline_search(inline_query: types.InlineQuery):
    users = await load_db()
    user_id = None
    message = inline_query.query.lower()

    if len(message.split('/')) > 1 and message.split('/')[-2].isdigit():
        user_id = message.split('/')[-2]
    else:
        for user in users:
            if user["username"].lower() == message.split('/')[-1].lower():
                user_id = re.search(r'\d+', user["link"]).group(0)
                break

    prsr = Parser()
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    user_data = await get_cached_user_data(user_id, prsr.parse_usr_data)
    
    if user_data:
        if user_data.avatar_link == "/img/layout/avatar.png":
            user_data.avatar_link = None
        if user_data.estimation == "?":
            user_data.estimation = "–ï—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ (?)"

        status = user_data.status.replace(' ', '').replace('\n', '')

        sanclist_text = "\n".join(f"{name} - {rating}" for rating, name in user_data.sanclist)
        answers = [
            types.InlineQueryResultArticle(
                id='1',
                title=f"üêí –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {user_data.username}",
                description=f"‚≠ê –û—Ç–∑—ã–≤–æ–≤: {user_data.reviews_count}\n‚≠ê –û—Ü–µ–Ω–∫–∞: {user_data.estimation}",
                thumbnail_url=user_data.avatar_link if user_data.avatar_link else "https://funpay.com/img/layout/avatar.png",
                input_message_content=types.InputTextMessageContent(
                    message_text=f"""
üíé <b>–ü–æ–ª–Ω–∞—è</b> –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ <b>{user_data.username}</b>

‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: <b>{user_data.reviews_count}</b>
‚≠ê –†–µ–π—Ç–∏–Ω–≥: <b>{user_data.estimation}</b>
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <b>{user_data.date_reg}</b>
‚öôÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–∫–∞—Ç–µ–≥–æ—Ä–∏–π): <b>{user_data.count_offers}</b>
‚öôÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤: <b>{user_data.lots}</b>
üìê –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: <b>{user_data.average_price}</b> (–æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ {user_data.lots} –ª–æ—Ç–∞—Ö)
{"üü¢" if status == '–û–Ω–ª–∞–π–Ω' else "üî¥"} –°—Ç–∞—Ç—É—Å: <b>{status}</b>
üßë‚Äçüíª –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: <b>{user_data.userlink}</b>
üé∞ –°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π –ª–æ—Ç: <b>{user_data.max_price}‚ÇΩ - {user_data.link_to_max_price}</b>
üê§ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–≥—Ä—ã –≤ –æ—Ç–∑—ã–≤–∞—Ö:
<b>{user_data.games_in_reviews}</b>
üêí –†—É–±–ª–µ–≤–∫–∏ –º–∞–Ω—Å–æ—Ä–∏: <b>{"–î–∞üê∑" if user_data.havemansory else "–ù–µ—Çü§Ø"}</b>
ü™ô –õ–æ—Ç–æ–≤ —Å –∞–≤—Ç–æ–≤—ã–¥–∞—á–µ–π: <b>{user_data.autolots}</b>

{f"üå∂Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:\n<b>{sanclist_text}</b>" if user_data.sanclist else f"üå∂Ô∏è –ù–µ –Ω–∞—à–µ–ª –ª–æ—Ç—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º"}
‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ 30 –∫–∞—Ç–æ–≥–æ—Ä–∏–π
""", parse_mode="HTML", disable_web_page_preview=False
                )
            ),
            types.InlineQueryResultArticle(
                id='2',
                title=f"üëÄ –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {user_data.username}",
                description=f"‚≠ê –û—Ç–∑—ã–≤–æ–≤: {user_data.reviews_count}\n‚≠ê –û—Ü–µ–Ω–∫–∞: {user_data.estimation}",
                thumbnail_url=user_data.avatar_link if user_data.avatar_link else "https://funpay.com/img/layout/avatar.png",
                input_message_content=types.InputTextMessageContent(
                    message_text=f"""
üíé <b>–ö—Ä–∞—Ç–∫–∞—è</b> –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ <b>{user_data.username}</b>

‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: <b>{user_data.reviews_count}</b>
‚≠ê –†–µ–π—Ç–∏–Ω–≥: <b>{user_data.estimation}</b>
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <b>{user_data.date_reg}</b>
‚öôÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–∫–∞—Ç–µ–≥–æ—Ä–∏–π): <b>{user_data.count_offers}</b>
‚öôÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤: <b>{user_data.lots}</b>
üéÉ –ê–≤–∞—Ç–∞—Ä–∫–∞: <b>{user_data.avatar_link if user_data.avatar_link else "https://funpay.com/img/layout/avatar.png"}</b>
                    """, parse_mode="HTML", disable_web_page_preview=False
                )
            )
        ]

        await inline_query.answer(answers, cache_time=1, is_personal=True)
        await save_data_to_db(user_data)

async def save_data_to_db(user_data: Data):
    try:
        async with aiofiles.open("database/users.json", "r", encoding="utf-8") as file:
            content = await file.read()
            users = json.loads(content)
            logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

        if not any(user["username"] == user_data.username and user["link"] == user_data.userlink for user in users):
            users.append({"username": user_data.username, "link": user_data.userlink})
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.username} | {user_data.userlink}")

        async with aiofiles.open("database/users.json", "w", encoding="utf-8") as file:
            await file.write(json.dumps(users, indent=4, ensure_ascii=False))

    except FileNotFoundError:
        async with aiofiles.open("database/users.json", "w", encoding="utf-8") as file:
            await file.write(json.dumps([{"username": user_data.username, "link": user_data.userlink}], indent=4, ensure_ascii=False))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
