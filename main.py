import requests
import aiohttp
from bs4 import BeautifulSoup
import logging
from colorama import Fore, Style, init
import re
from collections import Counter
from enums import Data

init()
USER_LIST_FILE = 'userdata.json'

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

async def fetch_user_data(user_id):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    url = f"https://funpay.com/users/{user_id}/"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=aiohttp.ClientTimeout(total=5), ssl=False) as response:
                response.raise_for_status()
                return await response.read()
    except aiohttp.ClientError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None


async def parse_reviews_count(soup):
    """
    –ø–∞—Ä—Å–∏—Ç –∫–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤
    """
    for element in soup.find_all(class_=["rating-full-count", "text-mini text-light mb5"]):
        text = element.get_text(strip=True).replace("–í—Å–µ–≥–æ ", "").replace("–æ—Ç–∑—ã–≤", "").replace('–∞', '').replace('–æ–≤', '')
        if text.isdigit():
            return text
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def parse_most_popular_game4reviews(soup):
    """
    —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–≥—Ä—ã –ø–æ –æ—Ç–∑—ã–≤–æ–≤ #TODO –ø–∞—Ä—Å–∏—Ç 25 –æ—Ç–∑—ã–≤–æ–≤, –∞ –∏ —Ç–æ –º–µ–Ω—å—à–µ, —á–µ–º –Ω–∞–¥–æ, —Ñ–∏–∫—Å–∏—Ç–±
    """
    games = [element.find("div", {"class": "review-item-detail"}).text.strip().split(",")[0].strip() for element in soup.find_all("div", {"class": "review-item-user"})]
    game_popularity = Counter(games)
    top_games = game_popularity.most_common(3)

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∫–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {Fore.GREEN} {len(games)} {Style.RESET_ALL}")
    return [f"{game[0]} - {game[1]}" for game in top_games]

async def parse_username(soup):
    """
    –ø–∞—Ä—Å–∏—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    element = soup.select_one(".mr4")
    return element.text.strip() if element else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def parse_estimation(soup):
    """—Ä–µ–π—Ç–∏–Ω–≥"""
    return (soup.select_one(".big") or {}).text.strip() or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def parse_registration_date(soup):
    """–¥–∞—Ç—É —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏"""
    text = next((element.text.split(), ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"])[0] for element in (soup.find("div", {"class": "text-nowrap"}),))
    return ' '.join([text[0], text[1], text[2]])

async def parse_offers_count(soup):
    """
    –ø–∞—Ä—Å–∏—Ç –∫–æ–ª-–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–∫–∞—Ç–µ–≥–æ—Ä–∏–π/–∏–≥—Ä)
    """
    return len(soup.select(".offer")) - 1 #1 offer —ç—Ç–æ –æ—Ç–∑—ã–≤—ã))

async def parse_lot_count(soup):
    """
    –ø–∞—Ä—Å–∏—Ç –∫–æ–ª-–≤–æ –ª–æ—Ç–æ–≤
    """
    return len(soup.select(".tc-item"))

async def parse_status(soup):
    """—Å—Ç–∞—Ç—É—Å"""
    element = soup.select_one(".media-user-status")
    return element.text.strip() if element else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def parse_price(soup):
    """
    –ø–∞—Ä—Å–∏—Ç —Ü–µ–Ω—É –ª–æ—Ç–æ–≤
    """
    max_price = -1
    max_price_link = None
    
    for element in soup.find_all("a", class_="tc-item"):
        price_lot = element.find("div", class_="tc-price", recursive=False)
        if price_lot and "sort" not in price_lot.get("class", []):
            try:
                price = float(price_lot.get_text(strip=True).replace(' ', '').replace(',', '.').replace('‚ÇΩ', ''))
                if price > max_price:
                    max_price = price
                    max_price_link = element.get("href")
            except ValueError:
                logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã: {price_lot.get_text(strip=True)}")
    
    return (max_price, max_price_link) if max_price != -1 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def parse_avatar(soup):
    """–∞–≤–∞—Ç–∞—Ä–∫–∞"""
    avatar_photo = soup.select_one(".avatar-photo[style]")
    if avatar_photo:
        return re.search(r"url\((.*?)\)", avatar_photo["style"]).group(1).strip('"')

async def parse_last_review(soup):
    """–ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤"""
    review_container = soup.find("div", {"class": "review-container"})
    if review_container:
        lines = [line.strip() for line in review_container.text.strip().splitlines() if line.strip()]
        return f"–î–∞—Ç–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è: {lines[0]}, –ò–≥—Ä–∞ –∏ —Ü–µ–Ω–∞: {lines[1]}, –û—Ç–∑—ã–≤: {' '.join(lines[2:])}" if len(lines) > 2 else "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"
    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"

async def parse_average_price(soup):
    """–ø–∞—Ä—Å —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã (–ø—Ä–∞–π—Å –≤—Å–µ—Ö –ª–æ—Ç–æ–≤ / –∫–æ–ª-–≤–æ –ª–æ—Ç–æ–≤)"""
    prices_list = []

    for element in soup.find_all("a", {"class": 'tc-item'}):
        price_lot = element.find("div", class_="tc-price")
        
        if price_lot and "sort" not in price_lot.get("class", []):
            try:
                price = float(price_lot.get_text(strip=True).replace(' ', '').replace(',', '.').replace('‚ÇΩ', ''))
                prices_list.append(price)

            except ValueError:
                logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã: {price_lot.get_text(strip=True)}")

    if prices_list:
        average_price = sum(prices_list) / len(prices_list)
        average_price = round(average_price, 2)
        
        return average_price
    else:
        logging.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ü–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ.")

async def mansory_check(soup):
    """–ø–∞—Ä—Å–∏—Ç –µ—Å—Ç—å –ª–∏ —Ä—É–±–ª–µ–≤–∫–∏ –º–∞–Ω—Å–æ—Ä–∏"""
    async for lot_id, name, price in parse_lots4prices(soup):
        if name.startswith("üíé–ê–í–¢–û–í–´–î–ê–ß–êüíé üî•8 Ball Pool: –ì–∞–π–¥ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤üî•") or "üíé–ê–í–¢–û–í–´–î–ê–ß–êüíé" in name:
            return True
    
    return False

async def parse_lots4prices(soup):
    """–ø–∞—Ä—Å –ª–æ—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏"""
    lot_elements = soup.select("a.tc-item[href*='funpay.com/lots/offer?id=']")
    for element in lot_elements[:20]:
        lot_id = element["href"].split("funpay.com/lots/offer?id=", 1)[1]
        name = element.select_one(".tc-desc-text").text.strip()
        price = element.select_one(".tc-price").text.strip()

        yield lot_id, name, price

async def parse_usr_data(user_id):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    html_response = await fetch_user_data(user_id)
    if html_response is None:
        return None
    
    soup = BeautifulSoup(html_response, "html.parser")
    
    data = Data(
        await parse_username(soup),
        await parse_reviews_count(soup),
        await parse_estimation(soup),
        await parse_registration_date(soup),
        await parse_offers_count(soup),
        await parse_last_review(soup),
        await parse_lot_count(soup),
        await parse_status(soup),
        *(await parse_price(soup)),
        await parse_average_price(soup),
        await parse_avatar(soup),
        await parse_most_popular_game4reviews(soup),
        await mansory_check(soup)
    )
    
    return data
